"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Email Configuration - AWS SES
USE_AWS_SES = os.environ.get('USE_AWS_SES', 'False') == 'True'

if USE_AWS_SES:
    # AWS SES Configuration
    EMAIL_BACKEND = 'django_ses.SESBackend'
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_SES_REGION_NAME = os.environ.get('AWS_SES_REGION_NAME', 'us-east-1')
    AWS_SES_REGION_ENDPOINT = f'email.{AWS_SES_REGION_NAME}.amazonaws.com'
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@usc-pis.com')
    SERVER_EMAIL = DEFAULT_FROM_EMAIL
    
    # Optional: Configuration for bounce and complaint handling
    AWS_SES_AUTO_THROTTLE = 0.5  # Throttle sending rate
    
else:
    # Fallback to SMTP (SendGrid or other)
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.sendgrid.net')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'apikey')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@usc-pis.herokuapp.com')
    SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Development fallback
if not USE_AWS_SES and not os.environ.get('EMAIL_HOST_PASSWORD'):
    # Fall back to console backend for development
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# --- Start Database Configuration ---
DATABASE_URL = os.environ.get('DATABASE_URL')

# If DATABASE_URL environment variable exists, use that (for Heroku)
if DATABASE_URL:
    # Configure for PostgreSQL using DATABASE_URL
    DATABASES = {
        'default': dj_database_url.config(
            conn_max_age=600,
            conn_health_checks=True,
            ssl_require=os.environ.get('DATABASE_SSL_REQUIRE', 'True') == 'True' # Default to requiring SSL for Heroku PG
        )
    }
    # Apply PostgreSQL specific settings
    DATABASES['default']['ATOMIC_REQUESTS'] = True
    DATABASES['default'].setdefault('OPTIONS', {})
    DATABASES['default']['OPTIONS']['connect_timeout'] = 10
    # Add other PostgreSQL-specific options here if needed (e.g., keepalives)
else:
    # Configure for local SQLite development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
            'ATOMIC_REQUESTS': True, # Safe for SQLite too
            # No incompatible OPTIONS needed for SQLite
        }
    }
# --- End Database Configuration ---


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable must be set. No default fallback allowed for security.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = ['usc-pis-5f030223f7a8.herokuapp.com', 'localhost', '127.0.0.1', 'testserver']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',  # Add whitenoise before staticfiles
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',  # Add token authentication
    'corsheaders',
    'django_filters',  # Add django-filter for API filtering
    'patients',
    'authentication',  # New authentication app
    'health_info',     # Add the missing health_info app
    'feedback',
    'file_uploads', # Add the new app
    'medical_certificates',  # Add this line
    'notifications',  # Add notifications app
    'reports',  # Add comprehensive reports app
    'utils',  # Add utils app for system monitoring and management commands
]

# Add Cloudinary apps only when enabled and packages are available
if os.environ.get('USE_CLOUDINARY') == 'True':
    try:
        # Test if cloudinary packages are available
        import cloudinary_storage
        import cloudinary
        
        # Insert cloudinary apps before local apps that use file uploads
        local_apps_start = INSTALLED_APPS.index('patients')
        INSTALLED_APPS.insert(local_apps_start, 'cloudinary_storage')
        INSTALLED_APPS.insert(local_apps_start + 1, 'cloudinary')
        
    except ImportError:
        print("Warning: Cloudinary packages not installed. Skipping Cloudinary apps in INSTALLED_APPS.")

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'backend.middleware.SecurityHeadersMiddleware',  # Add security headers
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add whitenoise middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    # 'backend.middleware.RateLimitMiddleware',  # Temporarily disabled - will be re-enabled in deployment
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'backend.middleware.APIVersionMiddleware',  # Add API versioning
    'backend.middleware.RequestLoggingMiddleware',  # Add request logging
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'backend.middleware.APIResponseMiddleware',  # Existing API response middleware
    'backend.middleware.HealthCheckMiddleware',  # Existing health check middleware
]

# CORS settings - Production ready
CORS_ALLOWED_ORIGINS = [
    "https://usc-pis-5f030223f7a8.herokuapp.com",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

# Security settings
CSRF_TRUSTED_ORIGINS = [
    "https://usc-pis-5f030223f7a8.herokuapp.com",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# CORS settings for production
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True  # Development only
else:
    CORS_ALLOW_ALL_ORIGINS = False  # Production - use specific origins only

# Additional CORS settings for better API support
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
]

# Ensure CORS preflight requests are handled properly
CORS_PREFLIGHT_MAX_AGE = 86400

# Allow credentials for authentication
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'frontend', 'frontend', 'dist'),  # Add the frontend build directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Cache settings for database queries
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Set timezone to Philippines (Cebu City, USC-DC location)
TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend', 'frontend', 'dist'),  # Add the frontend build directory
]

# Whitenoise settings
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploads)
MEDIA_URL = '/media/' # URL prefix for user-uploaded files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Absolute filesystem path to the directory for user-uploaded files

# Cloudinary configuration for production media storage
# Only activate when explicitly enabled via environment variable
if os.environ.get('USE_CLOUDINARY') == 'True':
    try:
        import cloudinary
        import cloudinary.uploader
        import cloudinary.api
        
        cloudinary.config(
            cloud_name=os.environ.get('CLOUDINARY_CLOUD_NAME'),
            api_key=os.environ.get('CLOUDINARY_API_KEY'),
            api_secret=os.environ.get('CLOUDINARY_API_SECRET'),
            secure=True
        )
        
        # Use Cloudinary for media file storage
        DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
        
        # Update media URL for Cloudinary with proper structure
        MEDIA_URL = f"https://res.cloudinary.com/{os.environ.get('CLOUDINARY_CLOUD_NAME')}/image/upload/"
        
        # Optional: Customize Cloudinary settings
        CLOUDINARY_STORAGE = {
            'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
            'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
            'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
            'SECURE': True,
            'MEDIA_TAG': 'media',  # Optional: tag all uploads
            'INVALID_VIDEO_ERROR_MESSAGE': 'Please upload a valid video file.',
            'EXCLUDE_DELETE_ORPHANED_MEDIA_PATHS': (),
            'FOLDER': 'usc-pis',  # Optional: organize uploads in folder
        }
        
    except ImportError:
        print("Warning: Cloudinary packages not installed. Using local file storage.")
        # Fall back to local storage if Cloudinary packages are not available

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'authentication.User'

# REST Framework settings - Production optimized
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # Enable for browsable API
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',  # Enable for API browsing
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    # Error handling
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    # API versioning
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1'],
}

# Security Settings
SECURE_SSL_REDIRECT = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Enhanced Security Headers
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Content Security Policy - Enhanced Security
CSP_DEFAULT_SRC = ("'self'",)
# Remove unsafe-inline and unsafe-eval for better security
CSP_SCRIPT_SRC = ("'self'", "https://cdn.jsdelivr.net")
CSP_STYLE_SRC = ("'self'", "https://fonts.googleapis.com", "https://cdn.jsdelivr.net")
CSP_FONT_SRC = ("'self'", "https://fonts.gstatic.com", "data:")
CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_CONNECT_SRC = ("'self'",)
CSP_FRAME_ANCESTORS = ("'none'",)
CSP_OBJECT_SRC = ("'none'",)
CSP_BASE_URI = ("'self'",)
CSP_FORM_ACTION = ("'self'",)
CSP_UPGRADE_INSECURE_REQUESTS = True

# Additional Security Headers
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_TZ = True

# Enhanced security settings (NEW)
RATE_LIMIT_ENABLED = os.environ.get('RATE_LIMIT_ENABLED', 'True') == 'True'
PASSWORD_BREACH_CHECK = os.environ.get('PASSWORD_BREACH_CHECK', 'True') == 'True'
FILE_SCAN_ENABLED = os.environ.get('FILE_SCAN_ENABLED', 'True') == 'True'
SYSTEM_MONITORING = os.environ.get('SYSTEM_MONITORING', 'True') == 'True'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Create temp uploads directory if it doesn't exist
import os
temp_uploads_dir = os.path.join(BASE_DIR, 'temp_uploads')
if not os.path.exists(temp_uploads_dir):
    try:
        os.makedirs(temp_uploads_dir, exist_ok=True)
    except Exception as e:
        # If we can't create the directory, use system temp directory
        import tempfile
        temp_uploads_dir = tempfile.gettempdir()

FILE_UPLOAD_TEMP_DIR = temp_uploads_dir

# Rate limiting settings
RATELIMIT_ENABLE = RATE_LIMIT_ENABLED
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_KEY_PREFIX = 'rl'

# Session security
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# CSRF settings
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = True

# Email Settings
if DEBUG:
    # Use console backend for development (prints emails to console)
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    # Configure for production (e.g., SMTP)
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'webmaster@localhost') # Change this

# Frontend URL (adjust based on your frontend's address)
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:5173') # Default for local Vite dev

# Logging Configuration (optional but recommended)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'authentication': { # Log messages from your authentication app
            'handlers': ['console'],
            'level': 'INFO', 
            'propagate': False,
        },
        'api.requests': { # Log API requests
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'security': { # Log security-related events
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        # Add other app loggers if needed
    },
}
