# Generated by Django 5.0.2 on 2025-07-06 09:32

import django.core.validators
import django.db.models.deletion
import health_info.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('health_info', '0002_healthinformation_delete_healthinfoplaceholder'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HealthCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('campaign_type', models.CharField(choices=[('VACCINATION', 'Vaccination Campaign'), ('MENTAL_HEALTH', 'Mental Health Awareness'), ('NUTRITION', 'Nutrition & Wellness'), ('DENTAL_HEALTH', 'Dental Health'), ('HYGIENE', 'Personal Hygiene'), ('EXERCISE', 'Physical Exercise'), ('SAFETY', 'Health & Safety'), ('PREVENTION', 'Disease Prevention'), ('AWARENESS', 'Health Awareness'), ('EMERGENCY', 'Emergency Health'), ('SEASONAL', 'Seasonal Health'), ('CUSTOM', 'Custom Campaign')], max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SCHEDULED', 'Scheduled'), ('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('COMPLETED', 'Completed'), ('ARCHIVED', 'Archived')], default='DRAFT', max_length=15)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=10)),
                ('content', models.TextField(help_text='Detailed campaign content')),
                ('summary', models.CharField(help_text='Brief campaign summary', max_length=500)),
                ('banner_image', models.ImageField(blank=True, help_text='Main banner image for the campaign', null=True, upload_to=health_info.models.banner_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif'])])),
                ('pubmat_image', models.ImageField(blank=True, help_text='PubMat (Public Material) for printing and distribution', null=True, upload_to=health_info.models.pubmat_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'pdf'])])),
                ('thumbnail_image', models.ImageField(blank=True, help_text='Thumbnail image for campaign listing', null=True, upload_to=health_info.models.campaign_image_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('target_audience', models.CharField(help_text='Target audience description', max_length=200)),
                ('objectives', models.TextField(help_text='Campaign objectives and goals')),
                ('call_to_action', models.CharField(help_text='What action should people take?', max_length=300)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('featured_until', models.DateTimeField(blank=True, help_text='Feature on homepage until this date', null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('engagement_count', models.PositiveIntegerField(default=0, help_text='Clicks, interactions, etc.')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500)),
                ('external_link', models.URLField(blank=True, help_text='External link for more information')),
                ('contact_info', models.CharField(blank=True, help_text='Contact information for inquiries', max_length=300)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_health_campaigns', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_health_campaigns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CampaignResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('resource_type', models.CharField(choices=[('DOCUMENT', 'Document'), ('IMAGE', 'Image'), ('VIDEO', 'Video'), ('INFOGRAPHIC', 'Infographic'), ('FLYER', 'Flyer'), ('POSTER', 'Poster'), ('BROCHURE', 'Brochure'), ('GUIDELINE', 'Guideline'), ('CHECKLIST', 'Checklist'), ('OTHER', 'Other')], max_length=15)),
                ('file', models.FileField(upload_to='campaign_resources/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'gif', 'mp4', 'avi', 'mov'])])),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('is_public', models.BooleanField(default=True, help_text='Whether this resource is publicly accessible')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='health_info.healthcampaign')),
            ],
            options={
                'ordering': ['resource_type', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CampaignFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='1-5 star rating')),
                ('usefulness', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='How useful was this campaign?')),
                ('clarity', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='How clear was the information?')),
                ('comments', models.TextField(blank=True)),
                ('suggestions', models.TextField(blank=True, help_text='Suggestions for improvement')),
                ('will_recommend', models.BooleanField(blank=True, null=True)),
                ('took_action', models.BooleanField(blank=True, help_text='Did you take the recommended action?', null=True)),
                ('learned_something_new', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='health_info.healthcampaign')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='healthcampaign',
            index=models.Index(fields=['status', 'start_date'], name='health_info_status_307538_idx'),
        ),
        migrations.AddIndex(
            model_name='healthcampaign',
            index=models.Index(fields=['campaign_type', 'status'], name='health_info_campaig_ba74f3_idx'),
        ),
        migrations.AddIndex(
            model_name='healthcampaign',
            index=models.Index(fields=['featured_until'], name='health_info_feature_8d8ee1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='campaignfeedback',
            unique_together={('campaign', 'user')},
        ),
    ]
